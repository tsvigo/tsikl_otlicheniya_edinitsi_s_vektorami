#include "klass_neyronnaya_sety.h"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Klass_Neyronnaya_sety::Klass_Neyronnaya_sety
///
#include "dialog.cpp"
/// 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
Klass_Neyronnaya_sety::Klass_Neyronnaya_sety()
{
  //  long long Klass_Neyronnaya_sety::Peremennaya_Oshibka ;
    
}
long long Klass_Neyronnaya_sety::Peremennaya_Oshibka ;
void	Klass_Neyronnaya_sety::Funktciia_resheniya()
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////// (3) Функция решения   /// funktsiya_resheniya // NOTE: функция решения
    //
    //////////////////////////////////////////////////////////////////////
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    for (int var = 101; var < 201; ++var) // это диапазон нейронов // NOTE: функция решения
    {
        //        // это для одного 101 нейрона:
        for (int index_neyrona = 1, index_sinapsa = 1;
             index_neyrona < 201, index_sinapsa < 10101;
             ++index_neyrona, index_sinapsa = index_sinapsa + 100)
        // выход за индекс?
        {
            //            // тут можно костыль поставить проверка что
            //            Synaps::Peremennaia_Soprotivlenie_Sinapsa[index_sinapsa] не
            //            0
            if (list_sinapsov[index_sinapsa] == 0) { // для избежания деления на 0
                list_sinapsov[index_sinapsa] = 1;
            }
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
            
        }

    }
    // нейроны второго ряда посчитаны
    // тут надо досчитать последний 201 нейрон.
    for (int index_neyrona = 101, index_sinapsa = 10001; index_neyrona < 201;
         ++index_neyrona, ++index_sinapsa)
    {
        if (list_sinapsov[index_sinapsa] == 0) { // для избежания деления на 0
            list_sinapsov[index_sinapsa] = 1;
        }
        
        list_neyronov[201] = list_neyronov[201] + (list_neyronov[index_neyrona] /
                                                   list_sinapsov[index_sinapsa]);//  list_sinapsov[index_sinapsa]==0
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// long long oshibka
   Klass_Neyronnaya_sety::Peremennaya_Oshibka
        =   1073741824-list_neyronov[201] ; /// получается если oshibka
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
        //   больше 0 то ошибка, если 0 или меньше то нет ошибки
    // заведомо ошибка, выведем 201 нейрон
    //  std::cout << "201 нейрон = "  << list_neyronov[201] << std::endl;
 //   std::cout << "ошибка = "  << oshibka << std::endl;
  // std::cout << "ошибка = "  <<    Klass_Neyronnaya_sety::Peremennaya_Oshibka  << std::endl;
    // TODO: надо сделать функцию решения как раньше в классе нейронная сеть: вызываем когда надо... Или можно пока goto
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
}
